import numpy as np
import random
from collections import deque

def generate_grid(size=5, start_value=1, box_value=2, banana_value=3):
    grid = np.zeros((size, size), dtype=int)
    start_pos = (0, 0)
    grid[start_pos] = start_value
    
    def place_item(value):
        while True:
            item_pos = (random.randint(0, size-1), random.randint(0, size-1))
            if grid[item_pos] == 0:
                grid[item_pos] = value
                return item_pos
                
    box_pos = place_item(box_value)
    banana_pos = place_item(banana_value)
    
    return grid, start_pos, box_pos, banana_pos

def bfs_2d(grid, start, target_value):
    rows, cols = grid.shape
    visited = np.zeros((rows, cols), dtype=bool)
    queue = deque([(start, [])])
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  
    
    while queue:
        (current_row, current_col), path = queue.popleft()
        
        if grid[current_row][current_col] == target_value:
            return path + [(current_row, current_col)]
        
        visited[current_row][current_col] = True
        
        for dr, dc in directions:
            new_row, new_col = current_row + dr, current_col + dc
            
            if 0 <= new_row < rows and 0 <= new_col < cols and not visited[new_row][new_col] and grid[new_row][new_col] != 1:
                queue.append(((new_row, new_col), path + [(current_row, current_col)]))
    
    return None

grid, start_pos, box_pos, banana_pos = generate_grid()

path_to_box = bfs_2d(grid, start_pos, 2)
print("Monkey found the box at position:", box_pos)

path_to_banana = bfs_2d(grid, box_pos, 3)
print("Monkey found the banana at position:", banana_pos)

complete_path = path_to_box + path_to_banana[1:]

print("Grid:\n", grid)
print("\nComplete Path:\n")
for i, pos in enumerate(complete_path):
    print(f"Step {i+1}: Move to position {pos}")
